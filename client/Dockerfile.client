# syntax=docker/dockerfile:1

# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Dockerfile reference guide at
# https://docs.docker.com/go/dockerfile-reference/

# Want to help us make this template better? Share your feedback here: https://forms.gle/ybq9Krt8jtBL3iCk7

ARG NODE_VERSION=20

FROM node:${NODE_VERSION}-alpine

# Create and define the node_modules's cache directory.
RUN mkdir -p /usr/src/cache/frontend
WORKDIR /usr/src/cache/frontend
 
# Install the application's dependencies into the node_modules's cache directory.
COPY package.json ./
COPY package-lock.json ./
RUN npm install

# Create and define the application's working directory.
RUN mkdir -p /usr/src/app/frontend
WORKDIR /usr/src/app/frontend

# COPY . .

# RUN chmod +x /usr/src/app/entrypoint.sh

# Download dependencies as a separate step to take advantage of Docker's caching.
# Leverage a cache mount to /root/.npm to speed up subsequent builds.
# Leverage a bind mounts to package.json and package-lock.json to avoid having to copy them into
# into this layer.
# RUN --mount=type=bind,source=package.json,target=package.json \
#     --mount=type=bind,source=package-lock.json,target=package-lock.json \
#     --mount=type=cache,target=/root/.npm \
#     npm ci --omit=dev

# COPY . .

# RUN npm install

# COPY .env.example .env

# Expose the port that the application listens on.
EXPOSE 5173

# Run the application.
# CMD npm run dev
